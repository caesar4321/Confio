# Generated by Django 4.2.20 on 2025-07-28 16:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0035_fix_invitation_trigger'),
    ]

    operations = [
        migrations.CreateModel(
            name='AchievementType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('slug', models.CharField(help_text='Unique identifier for this achievement type', max_length=50, unique=True)),
                ('name', models.CharField(help_text='Display name for this achievement', max_length=100)),
                ('description', models.TextField(help_text='Description of what this achievement represents')),
                ('category', models.CharField(choices=[('onboarding', 'Bienvenida'), ('trading', 'Intercambios'), ('social', 'Social y Viral'), ('verification', 'Verificaci√≥n'), ('ambassador', 'Embajador')], help_text='Category this achievement belongs to', max_length=20)),
                ('icon_emoji', models.CharField(blank=True, help_text='Emoji icon for this achievement (e.g., üèÜ, üéâ, üî•)', max_length=10, null=True)),
                ('color', models.CharField(default='#FFD700', help_text='Hex color code for achievement badge', max_length=7)),
                ('confio_reward', models.DecimalField(decimal_places=2, default=0, help_text='CONFIO tokens awarded for this achievement', max_digits=10)),
                ('is_repeatable', models.BooleanField(default=False, help_text='Whether users can earn this achievement multiple times')),
                ('requires_manual_review', models.BooleanField(default=False, help_text='Whether this achievement requires manual admin approval')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this achievement is currently available to earn')),
                ('display_order', models.PositiveIntegerField(default=1000, help_text='Display order in achievement lists (lower numbers first)')),
            ],
            options={
                'verbose_name': 'Achievement Type',
                'verbose_name_plural': 'Achievement Types',
                'ordering': ['category', 'display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('earned', 'Ganado'), ('claimed', 'Reclamado'), ('expired', 'Expirado')], default='pending', help_text='Current status of this achievement', max_length=20)),
                ('earned_at', models.DateTimeField(blank=True, help_text='When the achievement was earned', null=True)),
                ('claimed_at', models.DateTimeField(blank=True, help_text='When the CONFIO reward was claimed', null=True)),
                ('progress_data', models.JSONField(blank=True, default=dict, help_text='JSON data tracking progress toward this achievement')),
                ('earned_value', models.DecimalField(blank=True, decimal_places=2, help_text='Specific value earned (e.g., trade volume, referral count)', max_digits=10, null=True)),
                ('verification_notes', models.TextField(blank=True, help_text='Admin notes about verification', null=True)),
                ('account', models.ForeignKey(blank=True, help_text='Account associated with this achievement (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='users.account')),
                ('achievement_type', models.ForeignKey(help_text='Type of achievement earned', on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='users.achievementtype')),
                ('user', models.ForeignKey(help_text='User who earned this achievement', on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin who verified this achievement (if manual review required)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
                'ordering': ['-earned_at', '-created_at'],
                'unique_together': {('user', 'achievement_type', 'earned_at')},
            },
        ),
        migrations.CreateModel(
            name='TikTokViralShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('tiktok_url', models.URLField(help_text='URL of the TikTok video')),
                ('tiktok_username', models.CharField(help_text="User's TikTok username", max_length=100)),
                ('hashtags_used', models.JSONField(default=list, help_text='List of hashtags used in the video')),
                ('share_type', models.CharField(choices=[('achievement', 'Logro Compartido'), ('user_video', 'Video Original'), ('template_video', 'Video con Plantilla'), ('challenge', 'Desaf√≠o Viral')], help_text='Type of content shared', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('submitted', 'Enviado'), ('verified', 'Verificado'), ('rewarded', 'Recompensado'), ('rejected', 'Rechazado')], default='pending', help_text='Current verification status', max_length=20)),
                ('view_count', models.PositiveIntegerField(blank=True, help_text='Number of views on the TikTok video', null=True)),
                ('like_count', models.PositiveIntegerField(blank=True, help_text='Number of likes on the TikTok video', null=True)),
                ('share_count', models.PositiveIntegerField(blank=True, help_text='Number of shares of the TikTok video', null=True)),
                ('base_confio_reward', models.DecimalField(decimal_places=2, default=100, help_text='Base CONFIO reward for sharing', max_digits=10)),
                ('view_bonus_confio', models.DecimalField(decimal_places=2, default=0, help_text='Bonus CONFIO based on view count', max_digits=10)),
                ('total_confio_awarded', models.DecimalField(decimal_places=2, default=0, help_text='Total CONFIO awarded for this share', max_digits=10)),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the share was verified', null=True)),
                ('verification_notes', models.TextField(blank=True, help_text='Admin notes about verification', null=True)),
                ('achievement', models.ForeignKey(blank=True, help_text='Achievement being shared (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tiktok_shares', to='users.userachievement')),
                ('user', models.ForeignKey(help_text='User who shared the content', on_delete=django.db.models.deletion.CASCADE, related_name='tiktok_shares', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin who verified this share', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_tiktok_shares', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'TikTok Viral Share',
                'verbose_name_plural': 'TikTok Viral Shares',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'tiktok_url')},
            },
        ),
        migrations.CreateModel(
            name='InfluencerReferral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('tiktok_username', models.CharField(db_index=True, help_text='TikTok username of the influencer (without @)', max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('active', 'Activo'), ('converted', 'Convertido'), ('ambassador', 'Embajador')], default='pending', help_text='Current status of this referral', max_length=20)),
                ('first_transaction_at', models.DateTimeField(blank=True, help_text='When the referred user made their first transaction', null=True)),
                ('total_transaction_volume', models.DecimalField(decimal_places=2, default=0, help_text='Total volume of transactions by referred user', max_digits=12)),
                ('referrer_confio_awarded', models.DecimalField(decimal_places=2, default=0, help_text='CONFIO awarded to the influencer for this referral', max_digits=10)),
                ('referee_confio_awarded', models.DecimalField(decimal_places=2, default=0, help_text='CONFIO awarded to the referred user', max_digits=10)),
                ('reward_claimed_at', models.DateTimeField(blank=True, help_text='When rewards were claimed', null=True)),
                ('attribution_data', models.JSONField(blank=True, default=dict, help_text='Additional attribution data (IP, device info, etc.)')),
                ('influencer_user', models.ForeignKey(blank=True, help_text='Registered user account for the influencer (if they sign up)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='influencer_campaigns', to=settings.AUTH_USER_MODEL)),
                ('referred_user', models.ForeignKey(help_text='User who was referred', on_delete=django.db.models.deletion.CASCADE, related_name='influencer_referrals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Influencer Referral',
                'verbose_name_plural': 'Influencer Referrals',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['tiktok_username'], name='users_influ_tiktok__d5d1eb_idx'), models.Index(fields=['status'], name='users_influ_status_448d3c_idx'), models.Index(fields=['created_at'], name='users_influ_created_97d0fe_idx')],
            },
        ),
    ]
