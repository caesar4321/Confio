# Generated by Django 5.2 on 2025-09-02 02:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import users.models_employee
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('conversion', '0001_initial'),
        ('p2p_exchange', '0001_initial'),
        ('payments', '0001_initial'),
        ('send', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('code', models.CharField(help_text='Bank code/identifier', max_length=50)),
                ('name', models.CharField(help_text='Bank name', max_length=100)),
                ('short_name', models.CharField(blank=True, help_text='Short/common name for the bank', max_length=50, null=True)),
                ('supports_checking', models.BooleanField(default=True, help_text='Whether bank supports checking accounts')),
                ('supports_savings', models.BooleanField(default=True, help_text='Whether bank supports savings accounts')),
                ('supports_payroll', models.BooleanField(default=False, help_text='Whether bank supports payroll accounts')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this bank is currently supported')),
                ('display_order', models.PositiveIntegerField(default=1000, help_text='Display order in lists (lower numbers first)')),
            ],
            options={
                'ordering': ['country__display_order', 'display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('name', models.CharField(help_text='Business name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Business description', null=True)),
                ('category', models.CharField(choices=[('food', 'Comida y Bebidas'), ('retail', 'Comercio y Ventas'), ('services', 'Servicios Profesionales'), ('health', 'Belleza y Salud'), ('transport', 'Transporte y Delivery'), ('other', 'Otros Negocios')], help_text='Business category', max_length=20)),
                ('business_registration_number', models.CharField(blank=True, help_text='Business registration number or tax ID', max_length=20, null=True)),
                ('address', models.TextField(blank=True, help_text='Business address', null=True)),
            ],
            options={
                'verbose_name_plural': 'Businesses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('code', models.CharField(help_text='ISO 3166-1 alpha-2 country code (e.g., VE, CO, AR)', max_length=3, unique=True)),
                ('name', models.CharField(help_text='Country name', max_length=100)),
                ('flag_emoji', models.CharField(blank=True, help_text='Country flag emoji (e.g., ðŸ‡»ðŸ‡ª)', max_length=10, null=True)),
                ('currency_code', models.CharField(help_text='Currency code (e.g., VES, COP, ARS)', max_length=3)),
                ('currency_symbol', models.CharField(help_text='Currency symbol (e.g., Bs., $)', max_length=10)),
                ('requires_identification', models.BooleanField(default=True, help_text='Whether bank transfers require recipient ID number')),
                ('identification_name', models.CharField(default='CÃ©dula', help_text='Local name for ID document (e.g., CÃ©dula, DNI, RUT)', max_length=50)),
                ('identification_format', models.CharField(blank=True, help_text="Expected format for ID (e.g., 'V-12345678', '12345678-9')", max_length=100, null=True)),
                ('account_number_length', models.PositiveIntegerField(default=20, help_text='Typical account number length')),
                ('supports_phone_payments', models.BooleanField(default=False, help_text='Whether country supports phone-based payments')),
                ('is_active', models.BooleanField(default=True, help_text='Whether ConfÃ­o operates in this country')),
                ('display_order', models.PositiveIntegerField(default=1000, help_text='Display order in lists (lower numbers first)')),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='WalletDerivationPepper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_key', models.CharField(db_index=True, help_text='Unique key per account: user_{id}_{type}_{index} or user_{id}_business_{businessId}_{index}', max_length=255, unique=True)),
                ('pepper', models.CharField(help_text='Non-rotating pepper for derivation; changing it changes addresses', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Account Derivation Pepper',
                'verbose_name_plural': 'Account Derivation Peppers',
                'db_table': 'user_wallet_derivation_pepper',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalletPepper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_key', models.CharField(db_index=True, help_text='Unique key per account: user_{id}_{type}_{index} or user_{id}_business_{businessId}_{index}', max_length=255, unique=True)),
                ('pepper', models.CharField(help_text='Random pepper for additional entropy', max_length=64)),
                ('version', models.IntegerField(default=1, help_text='Pepper version for rotation support')),
                ('previous_pepper', models.CharField(blank=True, help_text='Previous pepper kept during grace period', max_length=64, null=True)),
                ('previous_version', models.IntegerField(blank=True, help_text='Previous version number', null=True)),
                ('grace_period_until', models.DateTimeField(blank=True, help_text='When the grace period for using previous pepper ends', null=True)),
                ('rotated_at', models.DateTimeField(blank=True, help_text='When the pepper was last rotated', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Account Wallet Pepper',
                'verbose_name_plural': 'Account Wallet Peppers',
                'db_table': 'user_wallet_pepper',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('firebase_uid', models.CharField(max_length=128, unique=True)),
                ('phone_country', models.CharField(blank=True, choices=[('AF', 'Afghanistan (+93)'), ('AL', 'Albania (+355)'), ('DZ', 'Algeria (+213)'), ('AS', 'American Samoa (+1)'), ('AD', 'Andorra (+376)'), ('AO', 'Angola (+244)'), ('AI', 'Anguilla (+1)'), ('AG', 'Antigua and Barbuda (+1)'), ('AR', 'Argentina (+54)'), ('AM', 'Armenia (+374)'), ('AW', 'Aruba (+297)'), ('AU', 'Australia (+61)'), ('AT', 'Austria (+43)'), ('AZ', 'Azerbaijan (+994)'), ('BS', 'Bahamas (+1)'), ('BH', 'Bahrain (+973)'), ('BD', 'Bangladesh (+880)'), ('BB', 'Barbados (+1)'), ('BY', 'Belarus (+375)'), ('BE', 'Belgium (+32)'), ('BZ', 'Belize (+501)'), ('BJ', 'Benin (+229)'), ('BM', 'Bermuda (+1)'), ('BT', 'Bhutan (+975)'), ('BO', 'Bolivia (+591)'), ('BA', 'Bosnia and Herzegovina (+387)'), ('BW', 'Botswana (+267)'), ('BR', 'Brazil (+55)'), ('IO', 'British Indian Ocean Territory (+246)'), ('VG', 'British Virgin Islands (+1)'), ('BN', 'Brunei (+673)'), ('BG', 'Bulgaria (+359)'), ('BF', 'Burkina Faso (+226)'), ('BI', 'Burundi (+257)'), ('KH', 'Cambodia (+855)'), ('CM', 'Cameroon (+237)'), ('CA', 'Canada (+1)'), ('CV', 'Cape Verde (+238)'), ('BQ', 'Caribbean Netherlands (+599)'), ('KY', 'Cayman Islands (+1)'), ('CF', 'Central African Republic (+236)'), ('TD', 'Chad (+235)'), ('CL', 'Chile (+56)'), ('CN', 'China (+86)'), ('CX', 'Christmas Island (+61)'), ('CC', 'Cocos Islands (+61)'), ('CO', 'Colombia (+57)'), ('KM', 'Comoros (+269)'), ('CD', 'Congo (DRC) (+243)'), ('CG', 'Congo (Republic) (+242)'), ('CK', 'Cook Islands (+682)'), ('CR', 'Costa Rica (+506)'), ('CI', "Cote d'Ivoire (+225)"), ('HR', 'Croatia (+385)'), ('CU', 'Cuba (+53)'), ('CW', 'Curacao (+599)'), ('CY', 'Cyprus (+357)'), ('CZ', 'Czech Republic (+420)'), ('DK', 'Denmark (+45)'), ('DJ', 'Djibouti (+253)'), ('DM', 'Dominica (+1)'), ('DO', 'Dominican Republic (+1)'), ('EC', 'Ecuador (+593)'), ('EG', 'Egypt (+20)'), ('SV', 'El Salvador (+503)'), ('GQ', 'Equatorial Guinea (+240)'), ('ER', 'Eritrea (+291)'), ('EE', 'Estonia (+372)'), ('ET', 'Ethiopia (+251)'), ('FK', 'Falkland Islands (+500)'), ('FO', 'Faroe Islands (+298)'), ('FJ', 'Fiji (+679)'), ('FI', 'Finland (+358)'), ('FR', 'France (+33)'), ('GF', 'French Guiana (+594)'), ('PF', 'French Polynesia (+689)'), ('GA', 'Gabon (+241)'), ('GM', 'Gambia (+220)'), ('GE', 'Georgia (+995)'), ('DE', 'Germany (+49)'), ('GH', 'Ghana (+233)'), ('GI', 'Gibraltar (+350)'), ('GR', 'Greece (+30)'), ('GL', 'Greenland (+299)'), ('GD', 'Grenada (+1)'), ('GP', 'Guadeloupe (+590)'), ('GU', 'Guam (+1)'), ('GT', 'Guatemala (+502)'), ('GG', 'Guernsey (+44)'), ('GN', 'Guinea (+224)'), ('GW', 'Guinea-Bissau (+245)'), ('GY', 'Guyana (+592)'), ('HT', 'Haiti (+509)'), ('HN', 'Honduras (+504)'), ('HK', 'Hong Kong (+852)'), ('HU', 'Hungary (+36)'), ('IS', 'Iceland (+354)'), ('IN', 'India (+91)'), ('ID', 'Indonesia (+62)'), ('IR', 'Iran (+98)'), ('IQ', 'Iraq (+964)'), ('IE', 'Ireland (+353)'), ('IM', 'Isle of Man (+44)'), ('IL', 'Israel (+972)'), ('IT', 'Italy (+39)'), ('JM', 'Jamaica (+1)'), ('JP', 'Japan (+81)'), ('JE', 'Jersey (+44)'), ('JO', 'Jordan (+962)'), ('KZ', 'Kazakhstan (+7)'), ('KE', 'Kenya (+254)'), ('KI', 'Kiribati (+686)'), ('XK', 'Kosovo (+383)'), ('KW', 'Kuwait (+965)'), ('KG', 'Kyrgyzstan (+996)'), ('LA', 'Laos (+856)'), ('LV', 'Latvia (+371)'), ('LB', 'Lebanon (+961)'), ('LS', 'Lesotho (+266)'), ('LR', 'Liberia (+231)'), ('LY', 'Libya (+218)'), ('LI', 'Liechtenstein (+423)'), ('LT', 'Lithuania (+370)'), ('LU', 'Luxembourg (+352)'), ('MO', 'Macau (+853)'), ('MK', 'Macedonia (+389)'), ('MG', 'Madagascar (+261)'), ('MW', 'Malawi (+265)'), ('MY', 'Malaysia (+60)'), ('MV', 'Maldives (+960)'), ('ML', 'Mali (+223)'), ('MT', 'Malta (+356)'), ('MH', 'Marshall Islands (+692)'), ('MQ', 'Martinique (+596)'), ('MR', 'Mauritania (+222)'), ('MU', 'Mauritius (+230)'), ('YT', 'Mayotte (+262)'), ('MX', 'Mexico (+52)'), ('FM', 'Micronesia (+691)'), ('MD', 'Moldova (+373)'), ('MC', 'Monaco (+377)'), ('MN', 'Mongolia (+976)'), ('ME', 'Montenegro (+382)'), ('MS', 'Montserrat (+1)'), ('MA', 'Morocco (+212)'), ('MZ', 'Mozambique (+258)'), ('MM', 'Myanmar (+95)'), ('NA', 'Namibia (+264)'), ('NR', 'Nauru (+674)'), ('NP', 'Nepal (+977)'), ('NL', 'Netherlands (+31)'), ('NC', 'New Caledonia (+687)'), ('NZ', 'New Zealand (+64)'), ('NI', 'Nicaragua (+505)'), ('NE', 'Niger (+227)'), ('NG', 'Nigeria (+234)'), ('NU', 'Niue (+683)'), ('NF', 'Norfolk Island (+672)'), ('KP', 'North Korea (+850)'), ('MP', 'Northern Mariana Islands (+1)'), ('NO', 'Norway (+47)'), ('OM', 'Oman (+968)'), ('PK', 'Pakistan (+92)'), ('PW', 'Palau (+680)'), ('PS', 'Palestine (+970)'), ('PA', 'Panama (+507)'), ('PG', 'Papua New Guinea (+675)'), ('PY', 'Paraguay (+595)'), ('PE', 'Peru (+51)'), ('PH', 'Philippines (+63)'), ('PL', 'Poland (+48)'), ('PT', 'Portugal (+351)'), ('PR', 'Puerto Rico (+1)'), ('QA', 'Qatar (+974)'), ('RE', 'Reunion (+262)'), ('RO', 'Romania (+40)'), ('RU', 'Russia (+7)'), ('RW', 'Rwanda (+250)'), ('BL', 'Saint Barthelemy (+590)'), ('SH', 'Saint Helena (+290)'), ('KN', 'Saint Kitts and Nevis (+1)'), ('LC', 'Saint Lucia (+1)'), ('MF', 'Saint Martin (+590)'), ('PM', 'Saint Pierre and Miquelon (+508)'), ('VC', 'Saint Vincent and the Grenadines (+1)'), ('WS', 'Samoa (+685)'), ('SM', 'San Marino (+378)'), ('ST', 'Sao Tome and Principe (+239)'), ('SA', 'Saudi Arabia (+966)'), ('SN', 'Senegal (+221)'), ('RS', 'Serbia (+381)'), ('SC', 'Seychelles (+248)'), ('SL', 'Sierra Leone (+232)'), ('SG', 'Singapore (+65)'), ('SX', 'Sint Maarten (+1)'), ('SK', 'Slovakia (+421)'), ('SI', 'Slovenia (+386)'), ('SB', 'Solomon Islands (+677)'), ('SO', 'Somalia (+252)'), ('ZA', 'South Africa (+27)'), ('KR', 'South Korea (+82)'), ('SS', 'South Sudan (+211)'), ('ES', 'Spain (+34)'), ('LK', 'Sri Lanka (+94)'), ('SD', 'Sudan (+249)'), ('SR', 'Suriname (+597)'), ('SJ', 'Svalbard and Jan Mayen (+47)'), ('SZ', 'Swaziland (+268)'), ('SE', 'Sweden (+46)'), ('CH', 'Switzerland (+41)'), ('SY', 'Syria (+963)'), ('TW', 'Taiwan (+886)'), ('TJ', 'Tajikistan (+992)'), ('TZ', 'Tanzania (+255)'), ('TH', 'Thailand (+66)'), ('TL', 'Timor-Leste (+670)'), ('TG', 'Togo (+228)'), ('TK', 'Tokelau (+690)'), ('TO', 'Tonga (+676)'), ('TT', 'Trinidad and Tobago (+1)'), ('TN', 'Tunisia (+216)'), ('TR', 'Turkey (+90)'), ('TM', 'Turkmenistan (+993)'), ('TC', 'Turks and Caicos Islands (+1)'), ('TV', 'Tuvalu (+688)'), ('VI', 'U.S. Virgin Islands (+1)'), ('UG', 'Uganda (+256)'), ('UA', 'Ukraine (+380)'), ('AE', 'United Arab Emirates (+971)'), ('GB', 'United Kingdom (+44)'), ('US', 'United States (+1)'), ('UY', 'Uruguay (+598)'), ('UZ', 'Uzbekistan (+998)'), ('VU', 'Vanuatu (+678)'), ('VA', 'Vatican City (+379)'), ('VE', 'Venezuela (+58)'), ('VN', 'Vietnam (+84)'), ('WF', 'Wallis and Futuna (+681)'), ('EH', 'Western Sahara (+212)'), ('YE', 'Yemen (+967)'), ('ZM', 'Zambia (+260)'), ('ZW', 'Zimbabwe (+263)')], help_text="User's country ISO code for phone number", max_length=2, null=True)),
                ('phone_number', models.CharField(blank=True, help_text="User's phone number without country code", max_length=15, null=True)),
                ('phone_key', models.CharField(blank=True, help_text='Canonical phone key for uniqueness across ISO variations', max_length=32, null=True)),
                ('auth_token_version', models.IntegerField(default=1, help_text='Version number for JWT tokens. Incrementing this invalidates all existing tokens.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('account_type', models.CharField(choices=[('personal', 'Personal'), ('business', 'Business')], default='personal', help_text='Type of account (personal or business)', max_length=10)),
                ('account_index', models.PositiveIntegerField(default=0, help_text='Index of the account within its type (0, 1, 2, etc.)')),
                ('algorand_address', models.CharField(blank=True, help_text='Algorand address for this account', max_length=58, null=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to=settings.AUTH_USER_MODEL)),
                ('business', models.ForeignKey(blank=True, help_text='Associated business for business accounts', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accounts', to='users.business')),
            ],
            options={
                'ordering': ['user', 'account_type', 'account_index'],
                'unique_together': {('user', 'account_type', 'account_index')},
            },
        ),
        migrations.CreateModel(
            name='BankInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('account_holder_name', models.CharField(help_text='Full name of the account/payment method holder', max_length=200)),
                ('account_number', models.CharField(blank=True, help_text='Account number (for banks) or identifier (for some fintech)', max_length=50, null=True)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number (for mobile wallets like Nequi, Yape, Pago MÃ³vil)', max_length=20, null=True)),
                ('email', models.EmailField(blank=True, help_text='Email address (for PayPal, Wise, etc.)', max_length=254, null=True)),
                ('username', models.CharField(blank=True, help_text='Username/handle (for some fintech platforms)', max_length=100, null=True)),
                ('account_type', models.CharField(blank=True, choices=[('ahorro', 'Cuenta de Ahorros'), ('corriente', 'Cuenta Corriente'), ('nomina', 'Cuenta NÃ³mina')], help_text='Type of bank account (only for banks)', max_length=20, null=True)),
                ('identification_number', models.CharField(blank=True, help_text='Identification number (required for some countries/banks)', max_length=30, null=True)),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default bank account for this account')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this bank info can be shared with other users')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this bank account has been verified')),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the bank account was verified', null=True)),
                ('account', models.ForeignKey(help_text='Account that owns this payment method', on_delete=django.db.models.deletion.CASCADE, related_name='bank_accounts', to='users.account')),
                ('bank', models.ForeignKey(blank=True, help_text='DEPRECATED: Use payment_method.bank instead', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bank_accounts', to='users.bank')),
                ('payment_method', models.ForeignKey(blank=True, help_text='Type of payment method (bank, fintech, etc.)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_payment_accounts', to='p2p_exchange.p2ppaymentmethod')),
                ('shared_with_users', models.ManyToManyField(blank=True, help_text='Users who have access to this bank information', related_name='shared_bank_info', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin user who verified this bank account', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_bank_accounts', to=settings.AUTH_USER_MODEL)),
                ('country', models.ForeignKey(blank=True, help_text='DEPRECATED: Use payment_method.country_code instead', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bank_accounts', to='users.country')),
            ],
            options={
                'verbose_name': 'Payment Method',
                'verbose_name_plural': 'Payment Methods',
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='bank',
            name='country',
            field=models.ForeignKey(help_text='Country where this bank operates', on_delete=django.db.models.deletion.CASCADE, related_name='banks', to='users.country'),
        ),
        migrations.CreateModel(
            name='BusinessEmployee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Administrator'), ('manager', 'Manager'), ('cashier', 'Cashier')], default='cashier', help_text='Employee role determining base permissions', max_length=20)),
                ('permissions', models.JSONField(blank=True, default=dict, help_text='Custom permissions overriding role defaults')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this employee is currently active')),
                ('hired_at', models.DateTimeField(auto_now_add=True, help_text='When the employee was added')),
                ('deactivated_at', models.DateTimeField(blank=True, help_text='When the employee was deactivated', null=True)),
                ('shift_start_time', models.TimeField(blank=True, help_text='Daily shift start time', null=True)),
                ('shift_end_time', models.TimeField(blank=True, help_text='Daily shift end time', null=True)),
                ('daily_transaction_limit', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum daily transaction amount', max_digits=10, null=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this employee')),
                ('business', models.ForeignKey(help_text='The business this employee works for', on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='users.business')),
                ('deactivated_by', models.ForeignKey(blank=True, help_text='User who deactivated this employee', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees_deactivated', to=settings.AUTH_USER_MODEL)),
                ('hired_by', models.ForeignKey(blank=True, help_text='User who added this employee', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees_hired', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='The user who is an employee', on_delete=django.db.models.deletion.CASCADE, related_name='employment_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-hired_at'],
                'indexes': [models.Index(fields=['business', 'is_active'], name='users_busin_busines_62c92b_idx'), models.Index(fields=['user', 'is_active'], name='users_busin_user_id_266894_idx'), models.Index(fields=['business', 'user', 'deleted_at'], name='idx_business_user_deleted')],
                'constraints': [models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('business', 'user'), name='unique_active_business_employee')],
            },
        ),
        migrations.AlterUniqueTogether(
            name='bank',
            unique_together={('country', 'code')},
        ),
        migrations.CreateModel(
            name='EmployeeActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('payment_accepted', 'Payment Accepted'), ('invoice_created', 'Invoice Created'), ('invoice_cancelled', 'Invoice Cancelled'), ('account_accessed', 'Account Accessed'), ('balance_viewed', 'Balance Viewed'), ('transaction_viewed', 'Transaction Viewed'), ('settings_changed', 'Settings Changed')], max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional details about the action')),
                ('invoice_id', models.CharField(blank=True, help_text='Related invoice ID if applicable', max_length=32, null=True)),
                ('transaction_id', models.CharField(blank=True, help_text='Related transaction hash if applicable', max_length=66, null=True)),
                ('amount', models.CharField(blank=True, help_text='Transaction amount if applicable', max_length=32, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_activity_logs', to='users.business')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['business', 'timestamp'], name='users_emplo_busines_067881_idx'), models.Index(fields=['employee', 'timestamp'], name='users_emplo_employe_bdbb76_idx'), models.Index(fields=['action', 'timestamp'], name='users_emplo_action_38f3f2_idx'), models.Index(fields=['invoice_id'], name='users_emplo_invoice_6ef086_idx'), models.Index(fields=['transaction_id'], name='users_emplo_transac_31b47b_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmployeeInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('invitation_code', models.CharField(default=users.models_employee.generate_invitation_code, editable=False, max_length=32, unique=True)),
                ('employee_phone', models.CharField(help_text='Phone number of the invited employee', max_length=20)),
                ('employee_phone_country', models.CharField(help_text='ISO country code for the phone number', max_length=2)),
                ('employee_phone_key', models.CharField(blank=True, help_text='Canonical phone key (callingcode:digits) for the invited employee', max_length=32, null=True)),
                ('employee_name', models.CharField(blank=True, help_text='Name of the invited employee (optional)', max_length=255)),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Administrator'), ('manager', 'Manager'), ('cashier', 'Cashier')], default='cashier', max_length=20)),
                ('permissions', models.JSONField(blank=True, default=dict, help_text='Custom permissions that override role defaults')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('expires_at', models.DateTimeField(help_text='When the invitation expires')),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('message', models.TextField(blank=True, help_text='Optional message to include with the invitation')),
                ('accepted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employee_invitations_accepted', to=settings.AUTH_USER_MODEL)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_invitations', to='users.business')),
                ('invited_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employee_invitations_sent', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['invitation_code'], name='users_emplo_invitat_e81015_idx'), models.Index(fields=['business', 'status'], name='users_emplo_busines_c33c12_idx'), models.Index(fields=['employee_phone', 'status'], name='users_emplo_employe_be6d32_idx'), models.Index(fields=['expires_at'], name='users_emplo_expires_da7a25_idx'), models.Index(fields=['employee_phone', 'employee_phone_country', 'status'], name='idx_invitation_phone_status'), models.Index(fields=['employee_phone_key', 'status'], name='idx_invitation_phonekey_status')],
                'constraints': [models.UniqueConstraint(condition=models.Q(('status', 'pending'), ('deleted_at__isnull', True)), fields=('business', 'employee_phone', 'employee_phone_country'), name='unique_pending_invitation_per_phone'), models.UniqueConstraint(condition=models.Q(('status', 'pending'), ('employee_phone_key__isnull', False), ('deleted_at__isnull', True)), fields=('business', 'employee_phone_key'), name='unique_pending_invitation_per_phonekey')],
            },
        ),
        migrations.CreateModel(
            name='UnifiedTransactionTable',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('send', 'Send/Receive'), ('payment', 'Payment'), ('conversion', 'Conversion'), ('exchange', 'P2P Exchange')], db_index=True, max_length=10)),
                ('amount', models.CharField(max_length=32)),
                ('token_type', models.CharField(choices=[('CUSD', 'ConfÃ­o Dollar'), ('CONFIO', 'ConfÃ­o Token'), ('USDC', 'USD Coin')], max_length=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PENDING_SIG', 'Pending Signature'), ('PENDING_BLOCKCHAIN', 'Pending Blockchain'), ('SPONSORING', 'Sponsoring'), ('SIGNED', 'Signed'), ('SUBMITTED', 'Submitted'), ('CONFIRMED', 'Confirmed'), ('FAILED', 'Failed'), ('AML_REVIEW', 'Under AML Review')], max_length=20)),
                ('transaction_hash', models.CharField(blank=True, default='', max_length=66)),
                ('error_message', models.TextField(blank=True, default='')),
                ('sender_type', models.CharField(choices=[('user', 'Personal'), ('business', 'Business'), ('external', 'External')], max_length=10)),
                ('sender_display_name', models.CharField(blank=True, max_length=255)),
                ('sender_phone', models.CharField(blank=True, max_length=30)),
                ('sender_address', models.CharField(blank=True, default='', max_length=66)),
                ('counterparty_type', models.CharField(choices=[('user', 'Personal'), ('business', 'Business'), ('external', 'External')], max_length=10)),
                ('counterparty_display_name', models.CharField(blank=True, max_length=255)),
                ('counterparty_phone', models.CharField(blank=True, max_length=30, null=True)),
                ('counterparty_address', models.CharField(blank=True, default='', max_length=66)),
                ('description', models.TextField(blank=True)),
                ('invoice_id', models.CharField(blank=True, max_length=32, null=True)),
                ('payment_reference_id', models.CharField(blank=True, max_length=32, null=True)),
                ('from_address', models.CharField(blank=True, default='', max_length=66)),
                ('to_address', models.CharField(blank=True, default='', max_length=66)),
                ('is_invitation', models.BooleanField(default=False)),
                ('invitation_claimed', models.BooleanField(default=False)),
                ('invitation_reverted', models.BooleanField(default=False)),
                ('invitation_expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('transaction_date', models.DateTimeField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('conversion', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_transaction', to='conversion.conversion')),
                ('counterparty_business', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_table_counterparty_transactions', to='users.business')),
                ('counterparty_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_table_counterparty_transactions', to=settings.AUTH_USER_MODEL)),
                ('p2p_trade', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_transaction', to='p2p_exchange.p2ptrade')),
                ('payment_transaction', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_transaction', to='payments.paymenttransaction')),
                ('send_transaction', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_transaction', to='send.sendtransaction')),
                ('sender_business', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_table_sent_transactions', to='users.business')),
                ('sender_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_table_sent_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'unified_transactions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['-created_at'], name='unified_tra_created_cbbaba_idx'), models.Index(fields=['transaction_type', '-created_at'], name='unified_tra_transac_47d842_idx'), models.Index(fields=['sender_user', '-created_at'], name='unified_tra_sender__541842_idx'), models.Index(fields=['sender_business', '-created_at'], name='unified_tra_sender__ddd5b2_idx'), models.Index(fields=['counterparty_user', '-created_at'], name='unified_tra_counter_c6c09a_idx'), models.Index(fields=['counterparty_business', '-created_at'], name='unified_tra_counter_465c28_idx'), models.Index(fields=['status', '-created_at'], name='unified_tra_status_4bf89c_idx'), models.Index(fields=['token_type', '-created_at'], name='unified_tra_token_t_1f7468_idx')],
            },
        ),
    ]
