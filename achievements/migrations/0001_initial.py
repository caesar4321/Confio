# Generated by Django 4.2.20 on 2025-07-29 15:21

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AchievementType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('slug', models.CharField(blank=True, help_text='Unique identifier for this achievement type (auto-generated from name if blank)', max_length=50, unique=True)),
                ('name', models.CharField(help_text='Display name for this achievement', max_length=100)),
                ('description', models.TextField(help_text='Description of what this achievement represents')),
                ('category', models.CharField(choices=[('onboarding', 'Bienvenida'), ('trading', 'Intercambios'), ('payments', 'Pagos y Transacciones'), ('social', 'Comunidad'), ('verification', 'Verificaci√≥n'), ('ambassador', 'Embajador')], help_text='Category this achievement belongs to', max_length=20)),
                ('icon_emoji', models.CharField(blank=True, help_text='Emoji icon for this achievement (e.g., üèÜ, üéâ, üî•)', max_length=10, null=True)),
                ('color', models.CharField(default='#FFD700', help_text='Hex color code for achievement badge', max_length=7)),
                ('confio_reward', models.DecimalField(decimal_places=2, default=0, help_text='CONFIO tokens awarded for this achievement', max_digits=10)),
                ('is_repeatable', models.BooleanField(default=False, help_text='Whether users can earn this achievement multiple times')),
                ('requires_manual_review', models.BooleanField(default=False, help_text='Whether this achievement requires manual admin approval')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this achievement is currently available to earn')),
                ('display_order', models.PositiveIntegerField(default=1000, help_text='Display order in achievement lists (lower numbers first)')),
            ],
            options={
                'verbose_name': 'Achievement Type',
                'verbose_name_plural': 'Achievement Types',
                'ordering': ['category', 'display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PioneroBetaTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=0)),
                ('last_user_id', models.IntegerField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pionero Beta Tracker',
                'verbose_name_plural': 'Pionero Beta Tracker',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('earned', 'Ganado'), ('claimed', 'Reclamado'), ('expired', 'Expirado')], default='pending', max_length=20)),
                ('progress_data', models.JSONField(blank=True, default=dict, help_text='JSON data tracking progress towards this achievement')),
                ('earned_at', models.DateTimeField(blank=True, help_text='When the achievement was earned', null=True)),
                ('claimed_at', models.DateTimeField(blank=True, help_text='When the reward was claimed', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When the achievement expires (if applicable)', null=True)),
                ('earned_value', models.DecimalField(blank=True, decimal_places=2, help_text='Actual value earned (for variable rewards)', max_digits=10, null=True)),
                ('achievement_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='achievements.achievementtype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
                'ordering': ['-earned_at', '-created_at'],
                'unique_together': {('user', 'achievement_type', 'deleted_at')},
            },
        ),
        migrations.CreateModel(
            name='TikTokViralShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('tiktok_url', models.URLField(help_text='URL of the TikTok video')),
                ('tiktok_username', models.CharField(help_text='TikTok username of the sharer', max_length=100)),
                ('hashtags_used', models.JSONField(default=list, help_text='Hashtags used in the video')),
                ('share_type', models.CharField(choices=[('achievement', 'Logro'), ('tutorial', 'Tutorial'), ('testimonial', 'Testimonio'), ('creative', 'Creativo')], default='achievement', max_length=20)),
                ('status', models.CharField(choices=[('pending_verification', 'Pendiente de Verificaci√≥n'), ('verified', 'Verificado'), ('rejected', 'Rechazado'), ('rewarded', 'Recompensado')], default='pending_verification', max_length=30)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('verification_notes', models.TextField(blank=True, help_text='Notes from verification process')),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of views on TikTok')),
                ('like_count', models.PositiveIntegerField(default=0, help_text='Number of likes on TikTok')),
                ('share_count', models.PositiveIntegerField(default=0, help_text='Number of shares on TikTok')),
                ('base_confio_reward', models.DecimalField(decimal_places=2, default=0, help_text='Base CONFIO reward for this share', max_digits=10)),
                ('view_bonus_confio', models.DecimalField(decimal_places=2, default=0, help_text='Additional CONFIO based on view count', max_digits=10)),
                ('total_confio_awarded', models.DecimalField(decimal_places=2, default=0, help_text='Total CONFIO awarded for this share', max_digits=10)),
                ('achievement', models.ForeignKey(blank=True, help_text='Achievement being shared (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tiktok_shares', to='achievements.userachievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiktok_shares', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin who verified this share', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_shares', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'TikTok Viral Share',
                'verbose_name_plural': 'TikTok Viral Shares',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SuspiciousActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('activity_type', models.CharField(choices=[('rapid_referrals', 'Referidos R√°pidos'), ('duplicate_device', 'Dispositivo Duplicado'), ('unusual_pattern', 'Patr√≥n Inusual'), ('fake_viral', 'Viral Falso'), ('account_farming', 'Farming de Cuentas')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('investigating', 'Investigando'), ('confirmed', 'Confirmado'), ('dismissed', 'Descartado')], default='pending', max_length=20)),
                ('detection_data', models.JSONField(help_text='Data that triggered the detection')),
                ('severity_score', models.PositiveIntegerField(default=1, help_text='Severity score 1-10')),
                ('investigation_notes', models.TextField(blank=True)),
                ('action_taken', models.TextField(blank=True, help_text='What action was taken')),
                ('investigated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='investigated_achievement_activities', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievement_suspicious_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Suspicious Activity',
                'verbose_name_plural': 'Suspicious Activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InfluencerAmbassador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('referrer_identifier', models.CharField(help_text='Primary identifier used for referrals', max_length=100, unique=True)),
                ('tier', models.CharField(choices=[('bronze', 'Bronce'), ('silver', 'Plata'), ('gold', 'Oro'), ('diamond', 'Diamante')], default='bronze', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Activo'), ('paused', 'Pausado'), ('terminated', 'Terminado')], default='active', max_length=20)),
                ('total_referrals', models.PositiveIntegerField(default=0, help_text='Total number of referrals')),
                ('active_referrals', models.PositiveIntegerField(default=0, help_text='Number of active referred users')),
                ('total_viral_views', models.PositiveBigIntegerField(default=0, help_text='Total views across all viral content')),
                ('monthly_viral_views', models.PositiveBigIntegerField(default=0, help_text='Views in current month')),
                ('referral_transaction_volume', models.DecimalField(decimal_places=2, default=0, help_text='Total transaction volume from referrals', max_digits=20)),
                ('confio_earned', models.DecimalField(decimal_places=2, default=0, help_text='Total CONFIO earned as ambassador', max_digits=15)),
                ('tier_achieved_at', models.DateTimeField(blank=True, help_text='When current tier was achieved', null=True)),
                ('tier_progress', models.JSONField(default=dict, help_text='Progress towards next tier')),
                ('custom_referral_code', models.CharField(blank=True, help_text='Custom referral code (gold+ tier)', max_length=20, null=True, unique=True)),
                ('referral_bonus_multiplier', models.DecimalField(decimal_places=2, default=1.0, help_text='Multiplier for referral rewards', max_digits=3)),
                ('viral_bonus_multiplier', models.DecimalField(decimal_places=2, default=1.0, help_text='Multiplier for viral content rewards', max_digits=3)),
                ('performance_score', models.DecimalField(decimal_places=2, default=0, help_text='Overall performance score (0-100)', max_digits=5)),
                ('last_activity_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Last referral or viral activity')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this ambassador')),
                ('has_early_access', models.BooleanField(default=False, help_text='Access to beta features')),
                ('has_exclusive_events', models.BooleanField(default=False, help_text='Invited to exclusive events')),
                ('has_monthly_bonus', models.BooleanField(default=False, help_text='Eligible for monthly performance bonus')),
                ('dedicatedSupport', models.BooleanField(default=False, help_text='Has dedicated support contact')),
                ('assigned_manager', models.ForeignKey(blank=True, help_text='Conf√≠o team member managing this ambassador', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_ambassadors', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ambassador_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Influencer Ambassador',
                'verbose_name_plural': 'Influencer Ambassadors',
                'ordering': ['-performance_score', '-total_referrals'],
            },
        ),
        migrations.CreateModel(
            name='ConfioRewardTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('transaction_type', models.CharField(choices=[('earned', 'Ganado'), ('unlocked', 'Desbloqueado'), ('spent', 'Gastado'), ('transferred', 'Transferido'), ('adjusted', 'Ajustado')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount of CONFIO in this transaction', max_digits=10)),
                ('balance_after', models.DecimalField(decimal_places=2, help_text='Balance after this transaction', max_digits=20)),
                ('reference_type', models.CharField(blank=True, help_text='Type of reference (achievement, referral, viral, etc.)', max_length=50)),
                ('reference_id', models.CharField(blank=True, help_text='ID of the referenced object', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of this transaction')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='confio_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'CONFIO Transaction',
                'verbose_name_plural': 'CONFIO Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ConfioRewardBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('total_earned', models.DecimalField(decimal_places=2, default=0, help_text='Total CONFIO ever earned', max_digits=20)),
                ('total_locked', models.DecimalField(decimal_places=2, default=0, help_text='Currently locked CONFIO', max_digits=20)),
                ('total_unlocked', models.DecimalField(decimal_places=2, default=0, help_text='Unlocked CONFIO (available for use)', max_digits=20)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, help_text='Total CONFIO spent or transferred', max_digits=20)),
                ('next_unlock_date', models.DateTimeField(blank=True, help_text='Next scheduled unlock date', null=True)),
                ('next_unlock_amount', models.DecimalField(decimal_places=2, default=0, help_text='Amount to unlock on next date', max_digits=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='confio_balance', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'CONFIO Balance',
                'verbose_name_plural': 'CONFIO Balances',
            },
        ),
        migrations.CreateModel(
            name='AmbassadorActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('activity_type', models.CharField(choices=[('referral', 'Nueva Referencia'), ('viral_content', 'Contenido Viral'), ('tier_upgrade', 'Mejora de Nivel'), ('milestone', 'Hito Alcanzado'), ('bonus_earned', 'Bono Ganado')], max_length=20)),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional activity data')),
                ('confio_earned', models.DecimalField(decimal_places=2, default=0, help_text='CONFIO earned from this activity', max_digits=10)),
                ('ambassador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='achievements.influencerambassador')),
            ],
            options={
                'verbose_name': 'Ambassador Activity',
                'verbose_name_plural': 'Ambassador Activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InfluencerReferral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('referrer_identifier', models.CharField(db_index=True, help_text='TikTok username, phone, or code of referrer', max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('active', 'Activo'), ('converted', 'Convertido'), ('failed', 'Fallido')], default='pending', max_length=20)),
                ('first_transaction_at', models.DateTimeField(blank=True, help_text='When referred user completed first transaction', null=True)),
                ('total_transaction_volume', models.DecimalField(decimal_places=2, default=0, help_text='Total volume of transactions by referred user', max_digits=20)),
                ('referrer_confio_awarded', models.DecimalField(decimal_places=2, default=0, help_text='CONFIO awarded to referrer', max_digits=10)),
                ('referee_confio_awarded', models.DecimalField(decimal_places=2, default=0, help_text='CONFIO awarded to referred user', max_digits=10)),
                ('reward_claimed_at', models.DateTimeField(blank=True, help_text='When rewards were claimed', null=True)),
                ('attribution_data', models.JSONField(blank=True, default=dict, help_text='Additional attribution data (source, campaign, etc.)')),
                ('influencer_user', models.ForeignKey(blank=True, help_text='User account of the influencer (if they have one)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='referred_users', to=settings.AUTH_USER_MODEL)),
                ('referred_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='influencer_referral', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Influencer Referral',
                'verbose_name_plural': 'Influencer Referrals',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['referrer_identifier', 'status'], name='achievement_referre_9b03e5_idx'), models.Index(fields=['referred_user', 'status'], name='achievement_referre_f4c504_idx')],
            },
        ),
    ]
