{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "set_sponsor_address(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setup_assets(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pause()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unpause()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "opt_in()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "add_vault(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "remove_vault(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "freeze_address(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unfreeze_address(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mint_admin(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "burn_admin(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mint_with_collateral()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "burn_for_collateral()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer_cusd(axfer,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_admin(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_collateral_ratio(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "refresh_reserve()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_usdc(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_stats()(uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_reserves()(uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_backing()(bool,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_frozen(address)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_vault(address)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "delete()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 9
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 2
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin",
                    "descr": "Admin address"
                },
                "collateral_ratio": {
                    "type": "uint64",
                    "key": "collateral_ratio",
                    "descr": "Collateral ratio (1e6 = 100%)"
                },
                "cusd_asset_id": {
                    "type": "uint64",
                    "key": "cusd_asset_id",
                    "descr": "Asset ID of Conf\u00edo Dollar token"
                },
                "cusd_circulating_supply": {
                    "type": "uint64",
                    "key": "cusd_circulating_supply",
                    "descr": "Current circulating supply of collateral-backed cUSD"
                },
                "is_paused": {
                    "type": "uint64",
                    "key": "is_paused",
                    "descr": "System pause state (0=active, 1=paused)"
                },
                "reserve_address": {
                    "type": "bytes",
                    "key": "reserve_address",
                    "descr": "ASA reserve address for minting/burning"
                },
                "sponsor_address": {
                    "type": "bytes",
                    "key": "sponsor_address",
                    "descr": "Sponsor address allowed to send app calls on behalf of users"
                },
                "tbills_backed_supply": {
                    "type": "uint64",
                    "key": "tbills_backed_supply",
                    "descr": "cUSD supply backed by T-bills/reserves (admin minted)"
                },
                "total_burned": {
                    "type": "uint64",
                    "key": "total_burned",
                    "descr": "Total Conf\u00edo Dollar burned"
                },
                "total_minted": {
                    "type": "uint64",
                    "key": "total_minted",
                    "descr": "Total Conf\u00edo Dollar minted"
                },
                "total_usdc_locked": {
                    "type": "uint64",
                    "key": "total_usdc_locked",
                    "descr": "Total USDC locked as collateral"
                },
                "usdc_asset_id": {
                    "type": "uint64",
                    "key": "usdc_asset_id",
                    "descr": "USDC asset ID (e.g., 31566704 on mainnet)"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "is_frozen": {
                    "type": "uint64",
                    "key": "is_frozen",
                    "descr": "Account freeze status (0=active, 1=frozen)"
                },
                "is_vault": {
                    "type": "uint64",
                    "key": "is_vault",
                    "descr": "Vault status (0=not vault, 1=is vault)"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "ConfioDollar",
        "methods": [
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the Conf\u00edo Dollar contract"
            },
            {
                "name": "set_sponsor_address",
                "args": [
                    {
                        "type": "address",
                        "name": "sponsor"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the sponsor address that can send app calls on behalf of users\nAdmin only"
            },
            {
                "name": "setup_assets",
                "args": [
                    {
                        "type": "uint64",
                        "name": "cusd_id"
                    },
                    {
                        "type": "uint64",
                        "name": "usdc_id"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Setup asset IDs and opt-in to both assets with proper funding\nMust be called as part of atomic group with payment to app for fees/min balance\nGroup structure: - Tx 0: Payment to app (at least 0.6 ALGO for opt-ins and fees) - Tx 1: This app call"
            },
            {
                "name": "pause",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Pause all operations"
            },
            {
                "name": "unpause",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Unpause operations"
            },
            {
                "name": "opt_in",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Allow accounts to opt-in"
            },
            {
                "name": "add_vault",
                "args": [
                    {
                        "type": "address",
                        "name": "vault_address"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Add a vault address"
            },
            {
                "name": "remove_vault",
                "args": [
                    {
                        "type": "address",
                        "name": "vault_address"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Remove a vault address"
            },
            {
                "name": "freeze_address",
                "args": [
                    {
                        "type": "address",
                        "name": "target_address"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Freeze an address from transacting"
            },
            {
                "name": "unfreeze_address",
                "args": [
                    {
                        "type": "address",
                        "name": "target_address"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Unfreeze an address"
            },
            {
                "name": "mint_admin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "address",
                        "name": "recipient"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Admin minting backed by T-bills or other reserves\nThis is separate from USDC collateralized minting Can be used for treasury-backed issuance"
            },
            {
                "name": "burn_admin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Admin burning to reduce supply (e.g., when selling T-bills)\nMust be called with cUSD transfer to app"
            },
            {
                "name": "mint_with_collateral",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Mint cUSD by depositing USDC (1:1 ratio)\nMust be called as part of atomic group with USDC transfer\nSupports two group structures:\nNon-sponsored (2 transactions): - Tx 0: USDC transfer from user to app - Tx 1: This app call\nSponsored (3 transactions): - Tx 0: Payment from sponsor to user (or app) for fees - Tx 1: USDC transfer from user to app - Tx 2: This app call"
            },
            {
                "name": "burn_for_collateral",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Burn cUSD to redeem USDC (1:1 ratio)\nMust be called as part of atomic group with cUSD transfer\nSupports two group structures:\nNon-sponsored (2 transactions): - Tx 0: cUSD transfer from user to app - Tx 1: This app call\nSponsored (3 transactions): - Tx 0: Payment from sponsor to user (or app) for fees - Tx 1: cUSD transfer from user to app - Tx 2: This app call"
            },
            {
                "name": "transfer_cusd",
                "args": [
                    {
                        "type": "axfer",
                        "name": "asset_transfer"
                    },
                    {
                        "type": "address",
                        "name": "recipient"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer Conf\u00edo Dollar with freeze checks\nCalled alongside an ASA transfer transaction\nNote: For stricter group binding, could require: - Global.group_size() == Int(2) - Txn.group_index() == Int(1) - asset_transfer matches Gtxn[0] Current implementation is sufficient since ASA freeze is enforced globally."
            },
            {
                "name": "update_admin",
                "args": [
                    {
                        "type": "address",
                        "name": "new_admin"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer admin rights to a new address (can be a multi-sig wallet)\nOnly current admin can transfer rights"
            },
            {
                "name": "update_collateral_ratio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_ratio"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Update collateral ratio (admin only)\n1000000 = 1:1, 1500000 = 1.5:1 (150% collateralized) Range: 100%-200%"
            },
            {
                "name": "refresh_reserve",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Refresh the stored reserve address from ASA parameters\nAdmin only - use if ASA reserve was intentionally rotated"
            },
            {
                "name": "withdraw_usdc",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "address",
                        "name": "recipient"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw USDC for treasury rebalancing (e.g., to purchase mTBILL)\nAdmin only - can be done while system is operational Maintains backing ratio by adjusting tracked reserves"
            },
            {
                "name": "get_stats",
                "args": [],
                "returns": {
                    "type": "(uint64,uint64)"
                },
                "desc": "Get minting and burning statistics"
            },
            {
                "name": "get_reserves",
                "args": [],
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64)"
                },
                "desc": "Get reserve statistics\nReturns: (total_usdc_locked, cusd_circulating_supply, tbills_backed_supply, collateral_ratio, total_supply)"
            },
            {
                "name": "verify_backing",
                "args": [],
                "returns": {
                    "type": "(bool,uint64)"
                },
                "desc": "Verify that USDC reserves match or exceed cUSD supply\nReturns (is_backed, actual_usdc_balance)"
            },
            {
                "name": "is_frozen",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Check if an address is frozen"
            },
            {
                "name": "is_vault",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Check if an address is a vault"
            },
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Only admin can update the application"
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Only admin can delete - require no outstanding supply and ASA reconfigured"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}