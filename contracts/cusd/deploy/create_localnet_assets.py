#!/usr/bin/env python3
"""
Create cUSD and test USDC assets on LocalNet
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from algosdk import account, mnemonic
from algosdk.v2client import algod
from algosdk.transaction import AssetConfigTxn, wait_for_confirmation
from contracts.config.localnet_accounts import ADMIN_ADDRESS, ADMIN_PRIVATE_KEY
from contracts.config.algorand_localnet_config import ALGORAND_NODE, ALGORAND_TOKEN

# Initialize Algod client
algod_client = algod.AlgodClient(ALGORAND_TOKEN, ALGORAND_NODE)

def create_asset(algod_client, creator, asset_name, unit_name, total_supply, decimals=6, clawback=None):
    """Create an ASA"""
    params = algod_client.suggested_params()
    
    # Create asset configuration transaction
    txn = AssetConfigTxn(
        sender=creator["address"],
        sp=params,
        total=total_supply,
        default_frozen=False,
        unit_name=unit_name,
        asset_name=asset_name,
        manager=creator["address"],  # Can update asset
        reserve=creator["address"],  # Holds reserve
        freeze=creator["address"],   # Can freeze accounts
        clawback=clawback if clawback else creator["address"],  # Can clawback
        url="https://confio.lat",
        decimals=decimals
    )
    
    # Sign transaction
    signed_txn = txn.sign(creator["private_key"])
    
    # Send transaction
    txid = algod_client.send_transaction(signed_txn)
    print(f"Creating {asset_name} asset, transaction ID: {txid}")
    
    # Wait for confirmation
    confirmed_txn = wait_for_confirmation(algod_client, txid, 4)
    asset_id = confirmed_txn["asset-index"]
    print(f"{asset_name} created with asset ID: {asset_id}")
    
    return asset_id

def main():
    print("=" * 60)
    print("Creating Assets on LocalNet")
    print("=" * 60)
    
    # Check connection
    try:
        status = algod_client.status()
        print(f"\nConnected to LocalNet:")
        print(f"  Last round: {status.get('last-round', 0)}")
    except Exception as e:
        print(f"Error connecting to LocalNet: {e}")
        print("Make sure LocalNet is running: algokit localnet start")
        sys.exit(1)
    
    # Admin account details
    admin = {
        "address": ADMIN_ADDRESS,
        "private_key": ADMIN_PRIVATE_KEY
    }
    
    print(f"\nUsing admin account: {admin['address'][:8]}...")
    
    # Check admin balance
    account_info = algod_client.account_info(admin["address"])
    balance = account_info["amount"] / 1_000_000
    print(f"Admin balance: {balance:.6f} ALGO")
    
    if balance < 1:
        print("Error: Admin account needs at least 1 ALGO")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("CREATING TEST USDC")
    print("=" * 60)
    
    # Create test USDC (for LocalNet testing)
    # Use maximum possible supply (2^64 - 1)
    max_supply = 2**64 - 1  # 18,446,744,073,709,551,615
    test_usdc_id = create_asset(
        algod_client,
        admin,
        asset_name="Test USDC",
        unit_name="USDC",
        total_supply=max_supply,  # Maximum possible with 6 decimals
        decimals=6
    )
    
    print("\n" + "=" * 60)
    print("CREATING CONFÍO DOLLAR (cUSD)")
    print("=" * 60)
    
    # Create cUSD 
    # Use maximum possible supply (2^64 - 1)
    # IMPORTANT: Clawback will be set to the app address after deployment
    cusd_id = create_asset(
        algod_client,
        admin,
        asset_name="Confío Dollar",
        unit_name="cUSD",
        total_supply=max_supply,  # Maximum possible with 6 decimals
        decimals=6,
        clawback=admin["address"]  # Initially admin, will update to app address later
    )
    
    # Save asset IDs to file
    print("\n" + "=" * 60)
    print("SAVING ASSET CONFIGURATION")
    print("=" * 60)
    
    config_content = f"""# LocalNet Asset Configuration
# Generated by create_localnet_assets.py

# Test USDC for LocalNet
TEST_USDC_ID = {test_usdc_id}

# Confío Dollar ASA
CUSD_ASSET_ID = {cusd_id}

# Import accounts
from contracts.config.localnet_accounts import *
"""
    
    with open("localnet_assets.py", "w") as f:
        f.write(config_content)
    
    print("Asset configuration saved to: localnet_assets.py")
    
    print("\n" + "=" * 60)
    print("ASSETS CREATED SUCCESSFULLY!")
    print("=" * 60)
    print(f"\nTest USDC ID: {test_usdc_id}")
    print(f"cUSD ID: {cusd_id}")
    print("\nNext steps:")
    print("1. Deploy the cUSD contract")
    print("2. Update cUSD clawback to the app address")
    print("3. Setup assets in the contract")
    print("4. Test minting and transfers")
    
    return test_usdc_id, cusd_id

if __name__ == "__main__":
    main()