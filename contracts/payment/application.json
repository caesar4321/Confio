{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "setup_assets(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pay_with_cusd(axfer,address,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pay_with_confio(axfer,address,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_fees()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_fee_recipient(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_sponsor(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pause()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unpause()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_fee_balances()(uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_total_volume()(uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_total_fees_collected()(uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_fee_recipient()address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_paused()bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "delete()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 10
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin",
                    "descr": "Admin address"
                },
                "confio_asset_id": {
                    "type": "uint64",
                    "key": "confio_asset_id",
                    "descr": "CONFIO token asset ID"
                },
                "confio_fees_balance": {
                    "type": "uint64",
                    "key": "confio_fees_balance",
                    "descr": "Accumulated CONFIO fees"
                },
                "cusd_asset_id": {
                    "type": "uint64",
                    "key": "cusd_asset_id",
                    "descr": "Conf\u00edo Dollar asset ID"
                },
                "cusd_fees_balance": {
                    "type": "uint64",
                    "key": "cusd_fees_balance",
                    "descr": "Accumulated Conf\u00edo Dollar fees"
                },
                "fee_recipient": {
                    "type": "bytes",
                    "key": "fee_recipient",
                    "descr": "Fee recipient address"
                },
                "is_paused": {
                    "type": "uint64",
                    "key": "is_paused",
                    "descr": "System pause state"
                },
                "receipt_count": {
                    "type": "uint64",
                    "key": "receipt_count",
                    "descr": "Number of receipts stored"
                },
                "sponsor_address": {
                    "type": "bytes",
                    "key": "sponsor_address",
                    "descr": "Sponsor address allowed to send app calls on behalf of users"
                },
                "total_confio_fees_collected": {
                    "type": "uint64",
                    "key": "total_confio_fees_collected",
                    "descr": "Total CONFIO fees collected"
                },
                "total_confio_volume": {
                    "type": "uint64",
                    "key": "total_confio_volume",
                    "descr": "Total CONFIO payment volume"
                },
                "total_cusd_fees_collected": {
                    "type": "uint64",
                    "key": "total_cusd_fees_collected",
                    "descr": "Total Conf\u00edo Dollar fees collected"
                },
                "total_cusd_volume": {
                    "type": "uint64",
                    "key": "total_cusd_volume",
                    "descr": "Total Conf\u00edo Dollar payment volume"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Payment",
        "methods": [
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the payment contract"
            },
            {
                "name": "setup_assets",
                "args": [
                    {
                        "type": "uint64",
                        "name": "cusd_id"
                    },
                    {
                        "type": "uint64",
                        "name": "confio_id"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Setup asset IDs for payments\nRequires exact sponsor funding for MBR increase"
            },
            {
                "name": "pay_with_cusd",
                "args": [
                    {
                        "type": "axfer",
                        "name": "payment"
                    },
                    {
                        "type": "address",
                        "name": "recipient"
                    },
                    {
                        "type": "string",
                        "name": "payment_id"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Process a Conf\u00edo Dollar payment with 0.9% fee\nThe payment transaction must be to this application"
            },
            {
                "name": "pay_with_confio",
                "args": [
                    {
                        "type": "axfer",
                        "name": "payment"
                    },
                    {
                        "type": "address",
                        "name": "recipient"
                    },
                    {
                        "type": "string",
                        "name": "payment_id"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Process a CONFIO payment with 0.9% fee\nThe payment transaction must be to this application"
            },
            {
                "name": "withdraw_fees",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Admin withdraws collected fees to fee recipient\nOnly withdraws tracked fee amounts, not entire balance"
            },
            {
                "name": "update_fee_recipient",
                "args": [
                    {
                        "type": "address",
                        "name": "new_recipient"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Admin updates the fee recipient address"
            },
            {
                "name": "set_sponsor",
                "args": [
                    {
                        "type": "address",
                        "name": "sponsor"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Admin sets or updates the sponsor address for sponsored transactions"
            },
            {
                "name": "pause",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Pause payment processing"
            },
            {
                "name": "unpause",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Unpause payment processing"
            },
            {
                "name": "get_fee_balances",
                "args": [],
                "returns": {
                    "type": "(uint64,uint64)"
                },
                "desc": "Get current fee balances held in contract"
            },
            {
                "name": "get_total_volume",
                "args": [],
                "returns": {
                    "type": "(uint64,uint64)"
                },
                "desc": "Get total payment volume"
            },
            {
                "name": "get_total_fees_collected",
                "args": [],
                "returns": {
                    "type": "(uint64,uint64)"
                },
                "desc": "Get total fees collected"
            },
            {
                "name": "get_fee_recipient",
                "args": [],
                "returns": {
                    "type": "address"
                },
                "desc": "Get current fee recipient address"
            },
            {
                "name": "is_paused",
                "args": [],
                "returns": {
                    "type": "bool"
                },
                "desc": "Check if system is paused"
            },
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Contract is immutable - updates are not allowed"
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Only admin can delete\nPrevents deletion if app holds any ASAs"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}