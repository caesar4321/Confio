#!/usr/bin/env python3
"""
Update Django settings to use Algorand LocalNet configuration
"""

import os
import sys

# Add parent directories to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

def create_env_file():
    """Create or update .env file with LocalNet configuration"""
    
    env_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))), '.env')
    
    # Read LocalNet creator accounts from config files
    import sys
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    
    # Try to import LocalNet configurations
    localnet_creators = {}
    try:
        from contracts.config.new_token_config import (
            CONFIO_CREATOR_ADDRESS,
            CONFIO_CREATOR_PRIVATE_KEY,
        )
        localnet_creators['LOCALNET_CONFIO_CREATOR_ADDRESS'] = CONFIO_CREATOR_ADDRESS
        localnet_creators['LOCALNET_CONFIO_CREATOR_KEY'] = CONFIO_CREATOR_PRIVATE_KEY
    except ImportError as e:
        print(f"‚ö†Ô∏è  Could not import CONFIO creator config: {e}")
    
    try:
        from contracts.config.confio_token_config import (
            CONFIO_CREATOR_ADDRESS as USDC_CREATOR_ADDRESS,
            CONFIO_CREATOR_PRIVATE_KEY as USDC_CREATOR_KEY,
        )
        localnet_creators['LOCALNET_USDC_CREATOR_ADDRESS'] = USDC_CREATOR_ADDRESS
        localnet_creators['LOCALNET_USDC_CREATOR_KEY'] = USDC_CREATOR_KEY
    except ImportError as e:
        print(f"‚ö†Ô∏è  Could not import USDC creator config: {e}")
    
    try:
        from contracts.config.new_token_config import CUSD_APP_ID
        localnet_creators['LOCALNET_CUSD_APP_ID'] = str(CUSD_APP_ID)
    except ImportError as e:
        print(f"‚ö†Ô∏è  Could not import cUSD app config: {e}")
    
    # LocalNet configuration
    localnet_config = {
        'ALGORAND_NETWORK': 'localnet',
        'ALGORAND_ALGOD_ADDRESS': 'http://localhost:4001',
        'ALGORAND_ALGOD_TOKEN': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        'ALGORAND_INDEXER_ADDRESS': 'http://localhost:8980',
        'ALGORAND_INDEXER_TOKEN': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        'ALGORAND_USDC_ASSET_ID': '1020',  # Mock USDC (old CONFIO)
        'ALGORAND_CUSD_ASSET_ID': '1036',  # cUSD
        'ALGORAND_CONFIO_ASSET_ID': '1057',  # New CONFIO with 1B supply
        'ALGORAND_SPONSOR_ADDRESS': '',  # Not used on LocalNet
        'ALGORAND_SPONSOR_MNEMONIC': '',  # Not used on LocalNet
        # Add LocalNet creator accounts
        **localnet_creators,
        # Distribution amounts
        'DISTRIBUTION_CONFIO': '1000',
        'DISTRIBUTION_USDC': '5000',
        'DISTRIBUTION_CUSD': '100',
    }
    
    # Read existing .env file
    existing_env = {}
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_env[key.strip()] = value.strip().strip('"').strip("'")
    
    # Update with LocalNet configuration
    existing_env.update(localnet_config)
    
    # Write back to .env file
    with open(env_path, 'w') as f:
        f.write("# Algorand LocalNet Configuration\n")
        f.write("# Generated by setup_localnet_config.py\n\n")
        
        # Write Algorand settings first
        f.write("# Algorand Settings\n")
        for key in sorted([k for k in existing_env.keys() if k.startswith('ALGORAND_')]):
            f.write(f"{key}={existing_env[key]}\n")
        f.write("\n")
        
        # Write other settings
        f.write("# Other Settings\n")
        for key in sorted([k for k in existing_env.keys() if not k.startswith('ALGORAND_')]):
            f.write(f"{key}={existing_env[key]}\n")
    
    print(f"‚úÖ Updated .env file with LocalNet configuration: {env_path}")
    return localnet_config

def main():
    print("=" * 60)
    print("SETTING UP ALGORAND LOCALNET CONFIGURATION")
    print("=" * 60)
    
    config = create_env_file()
    
    print("\nüìä LocalNet Configuration:")
    print(f"  Network: {config['ALGORAND_NETWORK']}")
    print(f"  Algod: {config['ALGORAND_ALGOD_ADDRESS']}")
    print(f"  Indexer: {config['ALGORAND_INDEXER_ADDRESS']}")
    print(f"  CONFIO Asset: {config['ALGORAND_CONFIO_ASSET_ID']}")
    print(f"  Mock USDC Asset: {config['ALGORAND_USDC_ASSET_ID']}")
    print(f"  cUSD Asset: {config['ALGORAND_CUSD_ASSET_ID']}")
    
    print("\n‚úÖ Configuration complete!")
    print("‚ÑπÔ∏è  Restart Django server to apply changes")

if __name__ == "__main__":
    main()