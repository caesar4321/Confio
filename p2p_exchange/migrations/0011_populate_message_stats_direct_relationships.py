# Generated by Django 4.2.20 on 2025-07-21 02:45

from django.db import migrations


def populate_message_direct_relationships(apps, schema_editor):
    """
    Populate the new direct user/business foreign key fields for messages based on existing sender data.
    """
    P2PMessage = apps.get_model('p2p_exchange', 'P2PMessage')
    
    print("Populating direct user/business relationships for P2P messages...")
    
    for message in P2PMessage.objects.all():
        print(f"Processing message {message.id}...")
        
        if message.sender:
            # For messages, we need to determine if the sender is participating as personal or business
            # Check the trade context to see if sender is involved as business or user
            trade = message.trade
            
            if hasattr(trade, 'buyer_user') and trade.buyer_user == message.sender:
                message.sender_user = message.sender
                print(f"  Set sender_user to: {message.sender.username} (buyer as user)")
            elif hasattr(trade, 'seller_user') and trade.seller_user == message.sender:
                message.sender_user = message.sender
                print(f"  Set sender_user to: {message.sender.username} (seller as user)")
            elif hasattr(trade, 'buyer_business') and trade.buyer_business and hasattr(trade.buyer_business, 'accounts'):
                # Check if sender has access to buyer business
                if trade.buyer_business.accounts.filter(user=message.sender).exists():
                    message.sender_business = trade.buyer_business
                    print(f"  Set sender_business to: {trade.buyer_business.name} (buyer business)")
                else:
                    # Default to personal user
                    message.sender_user = message.sender
                    print(f"  Set sender_user to: {message.sender.username} (default personal)")
            elif hasattr(trade, 'seller_business') and trade.seller_business and hasattr(trade.seller_business, 'accounts'):
                # Check if sender has access to seller business
                if trade.seller_business.accounts.filter(user=message.sender).exists():
                    message.sender_business = trade.seller_business
                    print(f"  Set sender_business to: {trade.seller_business.name} (seller business)")
                else:
                    # Default to personal user
                    message.sender_user = message.sender
                    print(f"  Set sender_user to: {message.sender.username} (default personal)")
            else:
                # Fallback: assume personal
                message.sender_user = message.sender
                print(f"  Fallback: Set sender_user to: {message.sender.username}")
                
        message.save()
        print(f"  Message {message.id} updated successfully")
    
    print("✅ Message direct relationship population completed!")


def populate_stats_direct_relationships(apps, schema_editor):
    """
    Populate the new direct user/business foreign key fields for stats based on existing user data.
    """
    P2PUserStats = apps.get_model('p2p_exchange', 'P2PUserStats')
    
    print("Populating direct user/business relationships for P2P user stats...")
    
    for stats in P2PUserStats.objects.all():
        print(f"Processing stats {stats.id}...")
        
        if stats.user:
            # For user stats, we default to personal user stats
            # Business stats would be created separately for each business
            stats.stats_user = stats.user
            print(f"  Set stats_user to: {stats.user.username}")
                
        stats.save()
        print(f"  Stats {stats.id} updated successfully")
    
    print("✅ Stats direct relationship population completed!")


def reverse_populate_message_direct_relationships(apps, schema_editor):
    """
    Reverse migration: Clear the new direct relationship fields for messages.
    """
    P2PMessage = apps.get_model('p2p_exchange', 'P2PMessage')
    
    print("Clearing message direct user/business relationships...")
    for message in P2PMessage.objects.all():
        message.sender_user = None
        message.sender_business = None
        message.save()
    print("✅ Message direct relationships cleared!")


def reverse_populate_stats_direct_relationships(apps, schema_editor):
    """
    Reverse migration: Clear the new direct relationship fields for stats.
    """
    P2PUserStats = apps.get_model('p2p_exchange', 'P2PUserStats')
    
    print("Clearing stats direct user/business relationships...")
    for stats in P2PUserStats.objects.all():
        stats.stats_user = None
        stats.stats_business = None
        stats.save()
    print("✅ Stats direct relationships cleared!")


class Migration(migrations.Migration):

    dependencies = [
        ('p2p_exchange', '0010_add_direct_user_business_to_messages_and_stats'),
    ]

    operations = [
        migrations.RunPython(
            populate_message_direct_relationships,
            reverse_populate_message_direct_relationships
        ),
        migrations.RunPython(
            populate_stats_direct_relationships,
            reverse_populate_stats_direct_relationships
        ),
    ]
