# Generated by Django 5.2 on 2025-09-02 02:45

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='P2PDispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('reason', models.TextField(help_text='Initial reason for dispute')),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('UNDER_REVIEW', 'Under Review'), ('RESOLVED', 'Resolved'), ('ESCALATED', 'Escalated')], default='OPEN', max_length=20)),
                ('priority', models.IntegerField(default=1, help_text='1=Low, 2=Medium, 3=High')),
                ('evidence_urls', models.JSONField(blank=True, default=list, help_text='List of evidence URLs')),
                ('admin_notes', models.TextField(blank=True, help_text='Internal notes from admin/support')),
                ('evidence_code', models.CharField(blank=True, help_text='One-time Conf√≠o code for evidence', max_length=12, null=True)),
                ('code_generated_at', models.DateTimeField(blank=True, null=True)),
                ('code_expires_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_type', models.CharField(blank=True, choices=[('REFUND_BUYER', 'Refund to Buyer'), ('RELEASE_TO_SELLER', 'Release to Seller'), ('PARTIAL_REFUND', 'Partial Refund'), ('CANCELLED', 'Trade Cancelled'), ('NO_ACTION', 'No Action Taken')], max_length=20, null=True)),
                ('resolution_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('opened_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P2PDisputeEvidence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('s3_bucket', models.CharField(blank=True, max_length=100)),
                ('s3_key', models.CharField(max_length=512)),
                ('url', models.URLField()),
                ('content_type', models.CharField(blank=True, max_length=100)),
                ('size_bytes', models.BigIntegerField(blank=True, null=True)),
                ('sha256', models.CharField(blank=True, max_length=80)),
                ('etag', models.CharField(blank=True, max_length=80)),
                ('confio_code', models.CharField(blank=True, max_length=16)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('source', models.CharField(choices=[('mobile', 'Mobile App'), ('web', 'Web Upload'), ('email', 'Email Ingest')], default='mobile', max_length=16)),
                ('status', models.CharField(choices=[('uploaded', 'Uploaded'), ('validated', 'Validated'), ('rejected', 'Rejected')], default='uploaded', max_length=16)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='P2PDisputeTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('transaction_type', models.CharField(choices=[('REFUND', 'Refund to Buyer'), ('RELEASE', 'Release to Seller'), ('PARTIAL_REFUND', 'Partial Refund'), ('SPLIT', 'Split Payment')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=8, max_digits=20)),
                ('token_type', models.CharField(max_length=10)),
                ('transaction_hash', models.CharField(blank=True, max_length=66)),
                ('block_number', models.BigIntegerField(blank=True, null=True)),
                ('gas_used', models.BigIntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('failure_reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'p2p_dispute_transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='P2PEscrow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('escrow_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('token_type', models.CharField(max_length=10)),
                ('escrow_transaction_hash', models.CharField(blank=True, max_length=66)),
                ('release_transaction_hash', models.CharField(blank=True, max_length=66)),
                ('is_escrowed', models.BooleanField(default=False, help_text='Funds are currently held in escrow')),
                ('is_released', models.BooleanField(default=False, help_text='Funds have been released from escrow')),
                ('release_type', models.CharField(blank=True, choices=[('NORMAL', 'Normal Release to Buyer'), ('REFUND', 'Refund to Seller'), ('PARTIAL_REFUND', 'Partial Refund'), ('DISPUTE_RELEASE', 'Dispute Release to Buyer')], help_text='How the funds were released from escrow', max_length=20)),
                ('release_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount released (may be less than escrow_amount for partial refunds)', max_digits=10, null=True)),
                ('escrowed_at', models.DateTimeField(blank=True, null=True)),
                ('released_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by_dispute', models.BooleanField(default=False, help_text='True if this escrow was resolved through dispute resolution')),
            ],
            options={
                'db_table': 'p2p_escrows',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='P2PFavoriteTrader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('note', models.TextField(blank=True, help_text='Personal note about this trader')),
            ],
            options={
                'db_table': 'p2p_favorite_traders',
            },
        ),
        migrations.CreateModel(
            name='P2PMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('message_type', models.CharField(choices=[('TEXT', 'Text'), ('SYSTEM', 'System'), ('PAYMENT_PROOF', 'Payment Proof')], default='TEXT', max_length=15)),
                ('content', models.TextField()),
                ('attachment_url', models.URLField(blank=True)),
                ('attachment_type', models.CharField(blank=True, max_length=50)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='P2POffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('exchange_type', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell')], max_length=4)),
                ('token_type', models.CharField(choices=[('cUSD', 'Conf√≠o Dollar'), ('CONFIO', 'Conf√≠o Token')], max_length=10)),
                ('rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('min_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('country_code', models.CharField(help_text="ISO country code (e.g., 'VE', 'US', 'AS')", max_length=2)),
                ('currency_code', models.CharField(default='', help_text="Currency code (e.g., 'VES', 'COP', 'ARS')", max_length=3)),
                ('terms', models.TextField(blank=True)),
                ('response_time_minutes', models.IntegerField(default=15)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='ACTIVE', max_length=10)),
                ('auto_complete_enabled', models.BooleanField(default=False)),
                ('auto_complete_time_minutes', models.IntegerField(default=30)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='P2PPaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('name', models.CharField(help_text="Unique identifier (e.g., 'banco_venezuela', 'nequi')", max_length=50)),
                ('display_name', models.CharField(help_text="User-friendly name (e.g., 'Banco de Venezuela', 'Nequi')", max_length=100)),
                ('provider_type', models.CharField(choices=[('bank', 'Traditional Bank'), ('fintech', 'Fintech/Digital Wallet'), ('cash', 'Cash/Physical'), ('other', 'Other')], default='other', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('icon', models.CharField(blank=True, help_text='Frontend icon reference', max_length=50)),
                ('country_code', models.CharField(blank=True, help_text="ISO country code (e.g., 'VE', 'US'). Leave empty for global methods.", max_length=2, null=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the payment method')),
                ('requires_phone', models.BooleanField(default=False, help_text='Whether this method requires a phone number (e.g., Pago M√≥vil)')),
                ('requires_email', models.BooleanField(default=False, help_text='Whether this method requires an email (e.g., PayPal)')),
                ('requires_account_number', models.BooleanField(default=True, help_text='Whether this method requires an account number')),
                ('display_order', models.IntegerField(default=0, help_text='Order for displaying in UI (lower numbers first)')),
            ],
            options={
                'ordering': ['display_order', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='P2PTrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('crypto_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('fiat_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('rate_used', models.DecimalField(decimal_places=2, max_digits=10)),
                ('country_code', models.CharField(default='VE', help_text='ISO country code from the offer', max_length=2)),
                ('currency_code', models.CharField(default='VES', help_text="Currency code (e.g., 'VES', 'COP', 'ARS')", max_length=3)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PAYMENT_PENDING', 'Payment Pending'), ('PAYMENT_SENT', 'Payment Sent'), ('PAYMENT_CONFIRMED', 'Payment Confirmed'), ('CRYPTO_RELEASED', 'Crypto Released'), ('COMPLETED', 'Completed'), ('DISPUTED', 'Disputed'), ('CANCELLED', 'Cancelled'), ('EXPIRED', 'Expired'), ('AML_REVIEW', 'Under AML Review')], default='PENDING', max_length=20)),
                ('expires_at', models.DateTimeField()),
                ('payment_reference', models.CharField(blank=True, max_length=200)),
                ('payment_notes', models.TextField(blank=True)),
                ('crypto_transaction_hash', models.CharField(blank=True, max_length=66)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='P2PTradeConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('confirmation_type', models.CharField(choices=[('PAYMENT_SENT', 'Payment Sent'), ('PAYMENT_RECEIVED', 'Payment Received'), ('CRYPTO_RELEASED', 'Crypto Released'), ('CRYPTO_RECEIVED', 'Crypto Received')], max_length=20)),
                ('reference', models.CharField(blank=True, max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('proof_image_url', models.URLField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'p2p_trade_confirmations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='P2PTradeRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('overall_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('speed_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('reliability_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, max_length=500)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('rated_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-rated_at'],
            },
        ),
        migrations.CreateModel(
            name='P2PUserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('total_trades', models.IntegerField(default=0)),
                ('completed_trades', models.IntegerField(default=0)),
                ('cancelled_trades', models.IntegerField(default=0)),
                ('disputed_trades', models.IntegerField(default=0)),
                ('success_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('avg_response_time', models.IntegerField(default=0)),
                ('last_seen_online', models.DateTimeField(auto_now=True)),
                ('total_volume_cusd', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_volume_confio', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_level', models.IntegerField(default=0)),
                ('avg_rating', models.DecimalField(decimal_places=2, default=0, help_text='Average rating from completed trades (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'ordering': ['-success_rate', '-completed_trades'],
            },
        ),
        migrations.CreateModel(
            name='PremiumUpgradeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Soft delete timestamp', null=True)),
                ('reason', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=16)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
